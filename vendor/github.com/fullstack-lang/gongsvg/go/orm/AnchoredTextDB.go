// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongsvg/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AnchoredText_sql sql.NullBool
var dummy_AnchoredText_time time.Duration
var dummy_AnchoredText_sort sort.Float64Slice

// AnchoredTextAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model anchoredtextAPI
type AnchoredTextAPI struct {
	gorm.Model

	models.AnchoredText

	// encoding of pointers
	AnchoredTextPointersEnconding
}

// AnchoredTextPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AnchoredTextPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Link{}.TextAtArrowEnd []*AnchoredText
	Link_TextAtArrowEndDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Link_TextAtArrowEndDBID_Index sql.NullInt64

	// Implementation of a reverse ID for field Link{}.TextAtArrowStart []*AnchoredText
	Link_TextAtArrowStartDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Link_TextAtArrowStartDBID_Index sql.NullInt64
}

// AnchoredTextDB describes a anchoredtext in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model anchoredtextDB
type AnchoredTextDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field anchoredtextDB.Name
	Name_Data sql.NullString

	// Declation for basic field anchoredtextDB.Content
	Content_Data sql.NullString

	// Declation for basic field anchoredtextDB.X_Offset
	X_Offset_Data sql.NullFloat64

	// Declation for basic field anchoredtextDB.Y_Offset
	Y_Offset_Data sql.NullFloat64

	// Declation for basic field anchoredtextDB.Color
	Color_Data sql.NullString

	// Declation for basic field anchoredtextDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field anchoredtextDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field anchoredtextDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field anchoredtextDB.StrokeDashArray
	StrokeDashArray_Data sql.NullString

	// Declation for basic field anchoredtextDB.StrokeDashArrayWhenSelected
	StrokeDashArrayWhenSelected_Data sql.NullString

	// Declation for basic field anchoredtextDB.Transform
	Transform_Data sql.NullString
	// encoding of pointers
	AnchoredTextPointersEnconding
}

// AnchoredTextDBs arrays anchoredtextDBs
// swagger:response anchoredtextDBsResponse
type AnchoredTextDBs []AnchoredTextDB

// AnchoredTextDBResponse provides response
// swagger:response anchoredtextDBResponse
type AnchoredTextDBResponse struct {
	AnchoredTextDB
}

// AnchoredTextWOP is a AnchoredText without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AnchoredTextWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`

	X_Offset float64 `xlsx:"3"`

	Y_Offset float64 `xlsx:"4"`

	Color string `xlsx:"5"`

	FillOpacity float64 `xlsx:"6"`

	Stroke string `xlsx:"7"`

	StrokeWidth float64 `xlsx:"8"`

	StrokeDashArray string `xlsx:"9"`

	StrokeDashArrayWhenSelected string `xlsx:"10"`

	Transform string `xlsx:"11"`
	// insertion for WOP pointer fields
}

var AnchoredText_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
	"X_Offset",
	"Y_Offset",
	"Color",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"StrokeDashArray",
	"StrokeDashArrayWhenSelected",
	"Transform",
}

type BackRepoAnchoredTextStruct struct {
	// stores AnchoredTextDB according to their gorm ID
	Map_AnchoredTextDBID_AnchoredTextDB map[uint]*AnchoredTextDB

	// stores AnchoredTextDB ID according to AnchoredText address
	Map_AnchoredTextPtr_AnchoredTextDBID map[*models.AnchoredText]uint

	// stores AnchoredText according to their gorm ID
	Map_AnchoredTextDBID_AnchoredTextPtr map[uint]*models.AnchoredText

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAnchoredText *BackRepoAnchoredTextStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAnchoredText.stage
	return
}

func (backRepoAnchoredText *BackRepoAnchoredTextStruct) GetDB() *gorm.DB {
	return backRepoAnchoredText.db
}

// GetAnchoredTextDBFromAnchoredTextPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) GetAnchoredTextDBFromAnchoredTextPtr(anchoredtext *models.AnchoredText) (anchoredtextDB *AnchoredTextDB) {
	id := backRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID[anchoredtext]
	anchoredtextDB = backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB[id]
	return
}

// BackRepoAnchoredText.CommitPhaseOne commits all staged instances of AnchoredText to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for anchoredtext := range stage.AnchoredTexts {
		backRepoAnchoredText.CommitPhaseOneInstance(anchoredtext)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, anchoredtext := range backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr {
		if _, ok := stage.AnchoredTexts[anchoredtext]; !ok {
			backRepoAnchoredText.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAnchoredText.CommitDeleteInstance commits deletion of AnchoredText to the BackRepo
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CommitDeleteInstance(id uint) (Error error) {

	anchoredtext := backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[id]

	// anchoredtext is not staged anymore, remove anchoredtextDB
	anchoredtextDB := backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB[id]
	query := backRepoAnchoredText.db.Unscoped().Delete(&anchoredtextDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID, anchoredtext)
	delete(backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr, id)
	delete(backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB, id)

	return
}

// BackRepoAnchoredText.CommitPhaseOneInstance commits anchoredtext staged instances of AnchoredText to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CommitPhaseOneInstance(anchoredtext *models.AnchoredText) (Error error) {

	// check if the anchoredtext is not commited yet
	if _, ok := backRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID[anchoredtext]; ok {
		return
	}

	// initiate anchoredtext
	var anchoredtextDB AnchoredTextDB
	anchoredtextDB.CopyBasicFieldsFromAnchoredText(anchoredtext)

	query := backRepoAnchoredText.db.Create(&anchoredtextDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID[anchoredtext] = anchoredtextDB.ID
	backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[anchoredtextDB.ID] = anchoredtext
	backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB[anchoredtextDB.ID] = &anchoredtextDB

	return
}

// BackRepoAnchoredText.CommitPhaseTwo commits all staged instances of AnchoredText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, anchoredtext := range backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr {
		backRepoAnchoredText.CommitPhaseTwoInstance(backRepo, idx, anchoredtext)
	}

	return
}

// BackRepoAnchoredText.CommitPhaseTwoInstance commits {{structname }} of models.AnchoredText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, anchoredtext *models.AnchoredText) (Error error) {

	// fetch matching anchoredtextDB
	if anchoredtextDB, ok := backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB[idx]; ok {

		anchoredtextDB.CopyBasicFieldsFromAnchoredText(anchoredtext)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers anchoredtext.Animates into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, animateAssocEnd := range anchoredtext.Animates {

			// get the back repo instance at the association end
			animateAssocEnd_DB :=
				backRepo.BackRepoAnimate.GetAnimateDBFromAnimatePtr(animateAssocEnd)

			// encode reverse pointer in the association end back repo instance
			animateAssocEnd_DB.AnchoredText_AnimatesDBID.Int64 = int64(anchoredtextDB.ID)
			animateAssocEnd_DB.AnchoredText_AnimatesDBID.Valid = true
			animateAssocEnd_DB.AnchoredText_AnimatesDBID_Index.Int64 = int64(idx)
			animateAssocEnd_DB.AnchoredText_AnimatesDBID_Index.Valid = true
			if q := backRepoAnchoredText.db.Save(animateAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoAnchoredText.db.Save(&anchoredtextDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AnchoredText intance %s", anchoredtext.Name))
		return err
	}

	return
}

// BackRepoAnchoredText.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CheckoutPhaseOne() (Error error) {

	anchoredtextDBArray := make([]AnchoredTextDB, 0)
	query := backRepoAnchoredText.db.Find(&anchoredtextDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	anchoredtextInstancesToBeRemovedFromTheStage := make(map[*models.AnchoredText]any)
	for key, value := range backRepoAnchoredText.stage.AnchoredTexts {
		anchoredtextInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, anchoredtextDB := range anchoredtextDBArray {
		backRepoAnchoredText.CheckoutPhaseOneInstance(&anchoredtextDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		anchoredtext, ok := backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[anchoredtextDB.ID]
		if ok {
			delete(anchoredtextInstancesToBeRemovedFromTheStage, anchoredtext)
		}
	}

	// remove from stage and back repo's 3 maps all anchoredtexts that are not in the checkout
	for anchoredtext := range anchoredtextInstancesToBeRemovedFromTheStage {
		anchoredtext.Unstage(backRepoAnchoredText.GetStage())

		// remove instance from the back repo 3 maps
		anchoredtextID := backRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID[anchoredtext]
		delete(backRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID, anchoredtext)
		delete(backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB, anchoredtextID)
		delete(backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr, anchoredtextID)
	}

	return
}

// CheckoutPhaseOneInstance takes a anchoredtextDB that has been found in the DB, updates the backRepo and stages the
// models version of the anchoredtextDB
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CheckoutPhaseOneInstance(anchoredtextDB *AnchoredTextDB) (Error error) {

	anchoredtext, ok := backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[anchoredtextDB.ID]
	if !ok {
		anchoredtext = new(models.AnchoredText)

		backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[anchoredtextDB.ID] = anchoredtext
		backRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID[anchoredtext] = anchoredtextDB.ID

		// append model store with the new element
		anchoredtext.Name = anchoredtextDB.Name_Data.String
		anchoredtext.Stage(backRepoAnchoredText.GetStage())
	}
	anchoredtextDB.CopyBasicFieldsToAnchoredText(anchoredtext)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	anchoredtext.Stage(backRepoAnchoredText.GetStage())

	// preserve pointer to anchoredtextDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AnchoredTextDBID_AnchoredTextDB)[anchoredtextDB hold variable pointers
	anchoredtextDB_Data := *anchoredtextDB
	preservedPtrToAnchoredText := &anchoredtextDB_Data
	backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB[anchoredtextDB.ID] = preservedPtrToAnchoredText

	return
}

// BackRepoAnchoredText.CheckoutPhaseTwo Checkouts all staged instances of AnchoredText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, anchoredtextDB := range backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB {
		backRepoAnchoredText.CheckoutPhaseTwoInstance(backRepo, anchoredtextDB)
	}
	return
}

// BackRepoAnchoredText.CheckoutPhaseTwoInstance Checkouts staged instances of AnchoredText to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, anchoredtextDB *AnchoredTextDB) (Error error) {

	anchoredtext := backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[anchoredtextDB.ID]
	_ = anchoredtext // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem anchoredtext.Animates in the stage from the encode in the back repo
	// It parses all AnimateDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	anchoredtext.Animates = anchoredtext.Animates[:0]
	// 2. loop all instances in the type in the association end
	for _, animateDB_AssocEnd := range backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if animateDB_AssocEnd.AnchoredText_AnimatesDBID.Int64 == int64(anchoredtextDB.ID) {
			// 4. fetch the associated instance in the stage
			animate_AssocEnd := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimatePtr[animateDB_AssocEnd.ID]
			// 5. append it the association slice
			anchoredtext.Animates = append(anchoredtext.Animates, animate_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(anchoredtext.Animates, func(i, j int) bool {
		animateDB_i_ID := backRepo.BackRepoAnimate.Map_AnimatePtr_AnimateDBID[anchoredtext.Animates[i]]
		animateDB_j_ID := backRepo.BackRepoAnimate.Map_AnimatePtr_AnimateDBID[anchoredtext.Animates[j]]

		animateDB_i := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB[animateDB_i_ID]
		animateDB_j := backRepo.BackRepoAnimate.Map_AnimateDBID_AnimateDB[animateDB_j_ID]

		return animateDB_i.AnchoredText_AnimatesDBID_Index.Int64 < animateDB_j.AnchoredText_AnimatesDBID_Index.Int64
	})

	return
}

// CommitAnchoredText allows commit of a single anchoredtext (if already staged)
func (backRepo *BackRepoStruct) CommitAnchoredText(anchoredtext *models.AnchoredText) {
	backRepo.BackRepoAnchoredText.CommitPhaseOneInstance(anchoredtext)
	if id, ok := backRepo.BackRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID[anchoredtext]; ok {
		backRepo.BackRepoAnchoredText.CommitPhaseTwoInstance(backRepo, id, anchoredtext)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAnchoredText allows checkout of a single anchoredtext (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAnchoredText(anchoredtext *models.AnchoredText) {
	// check if the anchoredtext is staged
	if _, ok := backRepo.BackRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID[anchoredtext]; ok {

		if id, ok := backRepo.BackRepoAnchoredText.Map_AnchoredTextPtr_AnchoredTextDBID[anchoredtext]; ok {
			var anchoredtextDB AnchoredTextDB
			anchoredtextDB.ID = id

			if err := backRepo.BackRepoAnchoredText.db.First(&anchoredtextDB, id).Error; err != nil {
				log.Panicln("CheckoutAnchoredText : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAnchoredText.CheckoutPhaseOneInstance(&anchoredtextDB)
			backRepo.BackRepoAnchoredText.CheckoutPhaseTwoInstance(backRepo, &anchoredtextDB)
		}
	}
}

// CopyBasicFieldsFromAnchoredText
func (anchoredtextDB *AnchoredTextDB) CopyBasicFieldsFromAnchoredText(anchoredtext *models.AnchoredText) {
	// insertion point for fields commit

	anchoredtextDB.Name_Data.String = anchoredtext.Name
	anchoredtextDB.Name_Data.Valid = true

	anchoredtextDB.Content_Data.String = anchoredtext.Content
	anchoredtextDB.Content_Data.Valid = true

	anchoredtextDB.X_Offset_Data.Float64 = anchoredtext.X_Offset
	anchoredtextDB.X_Offset_Data.Valid = true

	anchoredtextDB.Y_Offset_Data.Float64 = anchoredtext.Y_Offset
	anchoredtextDB.Y_Offset_Data.Valid = true

	anchoredtextDB.Color_Data.String = anchoredtext.Color
	anchoredtextDB.Color_Data.Valid = true

	anchoredtextDB.FillOpacity_Data.Float64 = anchoredtext.FillOpacity
	anchoredtextDB.FillOpacity_Data.Valid = true

	anchoredtextDB.Stroke_Data.String = anchoredtext.Stroke
	anchoredtextDB.Stroke_Data.Valid = true

	anchoredtextDB.StrokeWidth_Data.Float64 = anchoredtext.StrokeWidth
	anchoredtextDB.StrokeWidth_Data.Valid = true

	anchoredtextDB.StrokeDashArray_Data.String = anchoredtext.StrokeDashArray
	anchoredtextDB.StrokeDashArray_Data.Valid = true

	anchoredtextDB.StrokeDashArrayWhenSelected_Data.String = anchoredtext.StrokeDashArrayWhenSelected
	anchoredtextDB.StrokeDashArrayWhenSelected_Data.Valid = true

	anchoredtextDB.Transform_Data.String = anchoredtext.Transform
	anchoredtextDB.Transform_Data.Valid = true
}

// CopyBasicFieldsFromAnchoredTextWOP
func (anchoredtextDB *AnchoredTextDB) CopyBasicFieldsFromAnchoredTextWOP(anchoredtext *AnchoredTextWOP) {
	// insertion point for fields commit

	anchoredtextDB.Name_Data.String = anchoredtext.Name
	anchoredtextDB.Name_Data.Valid = true

	anchoredtextDB.Content_Data.String = anchoredtext.Content
	anchoredtextDB.Content_Data.Valid = true

	anchoredtextDB.X_Offset_Data.Float64 = anchoredtext.X_Offset
	anchoredtextDB.X_Offset_Data.Valid = true

	anchoredtextDB.Y_Offset_Data.Float64 = anchoredtext.Y_Offset
	anchoredtextDB.Y_Offset_Data.Valid = true

	anchoredtextDB.Color_Data.String = anchoredtext.Color
	anchoredtextDB.Color_Data.Valid = true

	anchoredtextDB.FillOpacity_Data.Float64 = anchoredtext.FillOpacity
	anchoredtextDB.FillOpacity_Data.Valid = true

	anchoredtextDB.Stroke_Data.String = anchoredtext.Stroke
	anchoredtextDB.Stroke_Data.Valid = true

	anchoredtextDB.StrokeWidth_Data.Float64 = anchoredtext.StrokeWidth
	anchoredtextDB.StrokeWidth_Data.Valid = true

	anchoredtextDB.StrokeDashArray_Data.String = anchoredtext.StrokeDashArray
	anchoredtextDB.StrokeDashArray_Data.Valid = true

	anchoredtextDB.StrokeDashArrayWhenSelected_Data.String = anchoredtext.StrokeDashArrayWhenSelected
	anchoredtextDB.StrokeDashArrayWhenSelected_Data.Valid = true

	anchoredtextDB.Transform_Data.String = anchoredtext.Transform
	anchoredtextDB.Transform_Data.Valid = true
}

// CopyBasicFieldsToAnchoredText
func (anchoredtextDB *AnchoredTextDB) CopyBasicFieldsToAnchoredText(anchoredtext *models.AnchoredText) {
	// insertion point for checkout of basic fields (back repo to stage)
	anchoredtext.Name = anchoredtextDB.Name_Data.String
	anchoredtext.Content = anchoredtextDB.Content_Data.String
	anchoredtext.X_Offset = anchoredtextDB.X_Offset_Data.Float64
	anchoredtext.Y_Offset = anchoredtextDB.Y_Offset_Data.Float64
	anchoredtext.Color = anchoredtextDB.Color_Data.String
	anchoredtext.FillOpacity = anchoredtextDB.FillOpacity_Data.Float64
	anchoredtext.Stroke = anchoredtextDB.Stroke_Data.String
	anchoredtext.StrokeWidth = anchoredtextDB.StrokeWidth_Data.Float64
	anchoredtext.StrokeDashArray = anchoredtextDB.StrokeDashArray_Data.String
	anchoredtext.StrokeDashArrayWhenSelected = anchoredtextDB.StrokeDashArrayWhenSelected_Data.String
	anchoredtext.Transform = anchoredtextDB.Transform_Data.String
}

// CopyBasicFieldsToAnchoredTextWOP
func (anchoredtextDB *AnchoredTextDB) CopyBasicFieldsToAnchoredTextWOP(anchoredtext *AnchoredTextWOP) {
	anchoredtext.ID = int(anchoredtextDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	anchoredtext.Name = anchoredtextDB.Name_Data.String
	anchoredtext.Content = anchoredtextDB.Content_Data.String
	anchoredtext.X_Offset = anchoredtextDB.X_Offset_Data.Float64
	anchoredtext.Y_Offset = anchoredtextDB.Y_Offset_Data.Float64
	anchoredtext.Color = anchoredtextDB.Color_Data.String
	anchoredtext.FillOpacity = anchoredtextDB.FillOpacity_Data.Float64
	anchoredtext.Stroke = anchoredtextDB.Stroke_Data.String
	anchoredtext.StrokeWidth = anchoredtextDB.StrokeWidth_Data.Float64
	anchoredtext.StrokeDashArray = anchoredtextDB.StrokeDashArray_Data.String
	anchoredtext.StrokeDashArrayWhenSelected = anchoredtextDB.StrokeDashArrayWhenSelected_Data.String
	anchoredtext.Transform = anchoredtextDB.Transform_Data.String
}

// Backup generates a json file from a slice of all AnchoredTextDB instances in the backrepo
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AnchoredTextDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AnchoredTextDB, 0)
	for _, anchoredtextDB := range backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB {
		forBackup = append(forBackup, anchoredtextDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json AnchoredText ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json AnchoredText file", err.Error())
	}
}

// Backup generates a json file from a slice of all AnchoredTextDB instances in the backrepo
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AnchoredTextDB, 0)
	for _, anchoredtextDB := range backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB {
		forBackup = append(forBackup, anchoredtextDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AnchoredText")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AnchoredText_Fields, -1)
	for _, anchoredtextDB := range forBackup {

		var anchoredtextWOP AnchoredTextWOP
		anchoredtextDB.CopyBasicFieldsToAnchoredTextWOP(&anchoredtextWOP)

		row := sh.AddRow()
		row.WriteStruct(&anchoredtextWOP, -1)
	}
}

// RestoreXL from the "AnchoredText" sheet all AnchoredTextDB instances
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAnchoredTextid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AnchoredText"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAnchoredText.rowVisitorAnchoredText)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoAnchoredText *BackRepoAnchoredTextStruct) rowVisitorAnchoredText(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var anchoredtextWOP AnchoredTextWOP
		row.ReadStruct(&anchoredtextWOP)

		// add the unmarshalled struct to the stage
		anchoredtextDB := new(AnchoredTextDB)
		anchoredtextDB.CopyBasicFieldsFromAnchoredTextWOP(&anchoredtextWOP)

		anchoredtextDB_ID_atBackupTime := anchoredtextDB.ID
		anchoredtextDB.ID = 0
		query := backRepoAnchoredText.db.Create(anchoredtextDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB[anchoredtextDB.ID] = anchoredtextDB
		BackRepoAnchoredTextid_atBckpTime_newID[anchoredtextDB_ID_atBackupTime] = anchoredtextDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AnchoredTextDB.json" in dirPath that stores an array
// of AnchoredTextDB and stores it in the database
// the map BackRepoAnchoredTextid_atBckpTime_newID is updated accordingly
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAnchoredTextid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AnchoredTextDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json AnchoredText file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AnchoredTextDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AnchoredTextDBID_AnchoredTextDB
	for _, anchoredtextDB := range forRestore {

		anchoredtextDB_ID_atBackupTime := anchoredtextDB.ID
		anchoredtextDB.ID = 0
		query := backRepoAnchoredText.db.Create(anchoredtextDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB[anchoredtextDB.ID] = anchoredtextDB
		BackRepoAnchoredTextid_atBckpTime_newID[anchoredtextDB_ID_atBackupTime] = anchoredtextDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json AnchoredText file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AnchoredText>id_atBckpTime_newID
// to compute new index
func (backRepoAnchoredText *BackRepoAnchoredTextStruct) RestorePhaseTwo() {

	for _, anchoredtextDB := range backRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextDB {

		// next line of code is to avert unused variable compilation error
		_ = anchoredtextDB

		// insertion point for reindexing pointers encoding
		// This reindex anchoredtext.TextAtArrowEnd
		if anchoredtextDB.Link_TextAtArrowEndDBID.Int64 != 0 {
			anchoredtextDB.Link_TextAtArrowEndDBID.Int64 =
				int64(BackRepoLinkid_atBckpTime_newID[uint(anchoredtextDB.Link_TextAtArrowEndDBID.Int64)])
		}

		// This reindex anchoredtext.TextAtArrowStart
		if anchoredtextDB.Link_TextAtArrowStartDBID.Int64 != 0 {
			anchoredtextDB.Link_TextAtArrowStartDBID.Int64 =
				int64(BackRepoLinkid_atBckpTime_newID[uint(anchoredtextDB.Link_TextAtArrowStartDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoAnchoredText.db.Model(anchoredtextDB).Updates(*anchoredtextDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAnchoredTextid_atBckpTime_newID map[uint]uint
