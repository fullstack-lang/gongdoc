// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongsvg/go/models"
	"github.com/fullstack-lang/gongsvg/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __AnchoredText__dummysDeclaration__ models.AnchoredText
var __AnchoredText_time__dummyDeclaration time.Duration

// An AnchoredTextID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAnchoredText updateAnchoredText deleteAnchoredText
type AnchoredTextID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AnchoredTextInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAnchoredText updateAnchoredText
type AnchoredTextInput struct {
	// The AnchoredText to submit or modify
	// in: body
	AnchoredText *orm.AnchoredTextAPI
}

// GetAnchoredTexts
//
// swagger:route GET /anchoredtexts anchoredtexts getAnchoredTexts
//
// # Get all anchoredtexts
//
// Responses:
// default: genericError
//
//	200: anchoredtextDBResponse
func (controller *Controller) GetAnchoredTexts(c *gin.Context) {

	// source slice
	var anchoredtextDBs []orm.AnchoredTextDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetAnchoredTexts", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoAnchoredText.GetDB()

	query := db.Find(&anchoredtextDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	anchoredtextAPIs := make([]orm.AnchoredTextAPI, 0)

	// for each anchoredtext, update fields from the database nullable fields
	for idx := range anchoredtextDBs {
		anchoredtextDB := &anchoredtextDBs[idx]
		_ = anchoredtextDB
		var anchoredtextAPI orm.AnchoredTextAPI

		// insertion point for updating fields
		anchoredtextAPI.ID = anchoredtextDB.ID
		anchoredtextDB.CopyBasicFieldsToAnchoredText(&anchoredtextAPI.AnchoredText)
		anchoredtextAPI.AnchoredTextPointersEnconding = anchoredtextDB.AnchoredTextPointersEnconding
		anchoredtextAPIs = append(anchoredtextAPIs, anchoredtextAPI)
	}

	c.JSON(http.StatusOK, anchoredtextAPIs)
}

// PostAnchoredText
//
// swagger:route POST /anchoredtexts anchoredtexts postAnchoredText
//
// Creates a anchoredtext
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostAnchoredText(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostAnchoredTexts", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoAnchoredText.GetDB()

	// Validate input
	var input orm.AnchoredTextAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create anchoredtext
	anchoredtextDB := orm.AnchoredTextDB{}
	anchoredtextDB.AnchoredTextPointersEnconding = input.AnchoredTextPointersEnconding
	anchoredtextDB.CopyBasicFieldsFromAnchoredText(&input.AnchoredText)

	query := db.Create(&anchoredtextDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoAnchoredText.CheckoutPhaseOneInstance(&anchoredtextDB)
	anchoredtext := backRepo.BackRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[anchoredtextDB.ID]

	if anchoredtext != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), anchoredtext)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, anchoredtextDB)
}

// GetAnchoredText
//
// swagger:route GET /anchoredtexts/{ID} anchoredtexts getAnchoredText
//
// Gets the details for a anchoredtext.
//
// Responses:
// default: genericError
//
//	200: anchoredtextDBResponse
func (controller *Controller) GetAnchoredText(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetAnchoredText", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoAnchoredText.GetDB()

	// Get anchoredtextDB in DB
	var anchoredtextDB orm.AnchoredTextDB
	if err := db.First(&anchoredtextDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var anchoredtextAPI orm.AnchoredTextAPI
	anchoredtextAPI.ID = anchoredtextDB.ID
	anchoredtextAPI.AnchoredTextPointersEnconding = anchoredtextDB.AnchoredTextPointersEnconding
	anchoredtextDB.CopyBasicFieldsToAnchoredText(&anchoredtextAPI.AnchoredText)

	c.JSON(http.StatusOK, anchoredtextAPI)
}

// UpdateAnchoredText
//
// swagger:route PATCH /anchoredtexts/{ID} anchoredtexts updateAnchoredText
//
// # Update a anchoredtext
//
// Responses:
// default: genericError
//
//	200: anchoredtextDBResponse
func (controller *Controller) UpdateAnchoredText(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateAnchoredText", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoAnchoredText.GetDB()

	// Validate input
	var input orm.AnchoredTextAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var anchoredtextDB orm.AnchoredTextDB

	// fetch the anchoredtext
	query := db.First(&anchoredtextDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	anchoredtextDB.CopyBasicFieldsFromAnchoredText(&input.AnchoredText)
	anchoredtextDB.AnchoredTextPointersEnconding = input.AnchoredTextPointersEnconding

	query = db.Model(&anchoredtextDB).Updates(anchoredtextDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	anchoredtextNew := new(models.AnchoredText)
	anchoredtextDB.CopyBasicFieldsToAnchoredText(anchoredtextNew)

	// get stage instance from DB instance, and call callback function
	anchoredtextOld := backRepo.BackRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[anchoredtextDB.ID]
	if anchoredtextOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), anchoredtextOld, anchoredtextNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the anchoredtextDB
	c.JSON(http.StatusOK, anchoredtextDB)
}

// DeleteAnchoredText
//
// swagger:route DELETE /anchoredtexts/{ID} anchoredtexts deleteAnchoredText
//
// # Delete a anchoredtext
//
// default: genericError
//
//	200: anchoredtextDBResponse
func (controller *Controller) DeleteAnchoredText(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteAnchoredText", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoAnchoredText.GetDB()

	// Get model if exist
	var anchoredtextDB orm.AnchoredTextDB
	if err := db.First(&anchoredtextDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&anchoredtextDB)

	// get an instance (not staged) from DB instance, and call callback function
	anchoredtextDeleted := new(models.AnchoredText)
	anchoredtextDB.CopyBasicFieldsToAnchoredText(anchoredtextDeleted)

	// get stage instance from DB instance, and call callback function
	anchoredtextStaged := backRepo.BackRepoAnchoredText.Map_AnchoredTextDBID_AnchoredTextPtr[anchoredtextDB.ID]
	if anchoredtextStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), anchoredtextStaged, anchoredtextDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
