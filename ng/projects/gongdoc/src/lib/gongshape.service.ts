// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { GongShapeDB } from './gongshape-db';

// insertion point for imports
import { PositionDB } from './position-db'
import { ClassdiagramDB } from './classdiagram-db'

@Injectable({
  providedIn: 'root'
})
export class GongShapeService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  GongShapeServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private gongshapesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.gongshapesUrl = origin + '/api/github.com/fullstack-lang/gongdoc/go/v1/gongshapes';
  }

  /** GET gongshapes from the server */
  getGongShapes(GONG__StackPath: string = ""): Observable<GongShapeDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<GongShapeDB[]>(this.gongshapesUrl, { params: params })
      .pipe(
        tap(_ => this.log('fetched gongshapes')),
        catchError(this.handleError<GongShapeDB[]>('getGongShapes', []))
      );
  }

  /** GET gongshape by id. Will 404 if id not found */
  getGongShape(id: number): Observable<GongShapeDB> {
    const url = `${this.gongshapesUrl}/${id}`;
    return this.http.get<GongShapeDB>(url).pipe(
      tap(_ => this.log(`fetched gongshape id=${id}`)),
      catchError(this.handleError<GongShapeDB>(`getGongShape id=${id}`))
    );
  }

  /** POST: add a new gongshape to the server */
  postGongShape(gongshapedb: GongShapeDB, GONG__StackPath: string): Observable<GongShapeDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    gongshapedb.Position = new PositionDB
    gongshapedb.Fields = []
    gongshapedb.Links = []
    let _Classdiagram_GongStructShapes_reverse = gongshapedb.Classdiagram_GongStructShapes_reverse
    gongshapedb.Classdiagram_GongStructShapes_reverse = new ClassdiagramDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<GongShapeDB>(this.gongshapesUrl, gongshapedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        gongshapedb.Classdiagram_GongStructShapes_reverse = _Classdiagram_GongStructShapes_reverse
        this.log(`posted gongshapedb id=${gongshapedb.ID}`)
      }),
      catchError(this.handleError<GongShapeDB>('postGongShape'))
    );
  }

  /** DELETE: delete the gongshapedb from the server */
  deleteGongShape(gongshapedb: GongShapeDB | number, GONG__StackPath: string): Observable<GongShapeDB> {
    const id = typeof gongshapedb === 'number' ? gongshapedb : gongshapedb.ID;
    const url = `${this.gongshapesUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<GongShapeDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted gongshapedb id=${id}`)),
      catchError(this.handleError<GongShapeDB>('deleteGongShape'))
    );
  }

  /** PUT: update the gongshapedb on the server */
  updateGongShape(gongshapedb: GongShapeDB, GONG__StackPath: string): Observable<GongShapeDB> {
    const id = typeof gongshapedb === 'number' ? gongshapedb : gongshapedb.ID;
    const url = `${this.gongshapesUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    gongshapedb.Position = new PositionDB
    gongshapedb.Fields = []
    gongshapedb.Links = []
    let _Classdiagram_GongStructShapes_reverse = gongshapedb.Classdiagram_GongStructShapes_reverse
    gongshapedb.Classdiagram_GongStructShapes_reverse = new ClassdiagramDB

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<GongShapeDB>(url, gongshapedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        gongshapedb.Classdiagram_GongStructShapes_reverse = _Classdiagram_GongStructShapes_reverse
        this.log(`updated gongshapedb id=${gongshapedb.ID}`)
      }),
      catchError(this.handleError<GongShapeDB>('updateGongShape'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in GongShapeService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("GongShapeService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
      console.log(message)
  }
}
