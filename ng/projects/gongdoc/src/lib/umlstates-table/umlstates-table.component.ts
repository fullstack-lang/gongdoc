// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData, FrontRepoService, FrontRepo, NullInt64, SelectionMode } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { UmlStateDB } from '../umlstate-db'
import { UmlStateService } from '../umlstate.service'

// TableComponent is initilizaed from different routes
// TableComponentMode detail different cases 
enum TableComponentMode {
  DISPLAY_MODE,
  ONE_MANY_ASSOCIATION_MODE,
  MANY_MANY_ASSOCIATION_MODE,
}

// generated table component
@Component({
  selector: 'app-umlstatestable',
  templateUrl: './umlstates-table.component.html',
  styleUrls: ['./umlstates-table.component.css'],
})
export class UmlStatesTableComponent implements OnInit {

  // mode at invocation
  mode: TableComponentMode

  // used if the component is called as a selection component of UmlState instances
  selection: SelectionModel<UmlStateDB>;
  initialSelection = new Array<UmlStateDB>();

  // the data source for the table
  umlstates: UmlStateDB[];
  matTableDataSource: MatTableDataSource<UmlStateDB>

  // front repo, that will be referenced by this.umlstates
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {

    // enable sorting on all fields (including pointers and reverse pointer)
    this.matTableDataSource.sortingDataAccessor = (umlstateDB: UmlStateDB, property: string) => {
      switch (property) {
        // insertion point for specific sorting accessor
        case 'Name':
          return umlstateDB.Name;

        case 'X':
          return umlstateDB.X;

        case 'Y':
          return umlstateDB.Y;

        case 'Umlsc_States':
          return this.frontRepo.Umlscs.get(umlstateDB.Umlsc_StatesDBID.Int64)?.Name;

        default:
          return UmlStateDB[property];
      }
    };

    // enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
    this.matTableDataSource.filterPredicate = (umlstateDB: UmlStateDB, filter: string) => {

      // filtering is based on finding a lower case filter into a concatenated string
      // the umlstateDB properties
      let mergedContent = ""

      // insertion point for merging of fields
      mergedContent += umlstateDB.Name.toLowerCase()
      mergedContent += umlstateDB.X.toString()
      mergedContent += umlstateDB.Y.toString()
      if (umlstateDB.Umlsc_StatesDBID.Int64 != 0) {
        mergedContent += this.frontRepo.Umlscs.get(umlstateDB.Umlsc_StatesDBID.Int64)?.Name.toLowerCase()
      }


      let isSelected = mergedContent.includes(filter.toLowerCase())
      return isSelected
    };

    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private umlstateService: UmlStateService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of umlstate instances
    public dialogRef: MatDialogRef<UmlStatesTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {

    // compute mode
    if (dialogData == undefined) {
      this.mode = TableComponentMode.DISPLAY_MODE
    } else {
      switch (dialogData.SelectionMode) {
        case SelectionMode.ONE_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.ONE_MANY_ASSOCIATION_MODE
          break
        case SelectionMode.MANY_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.MANY_MANY_ASSOCIATION_MODE
          break
        default:
      }
    }

    // observable for changes in structs
    this.umlstateService.UmlStateServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getUmlStates()
        }
      }
    )
    if (this.mode == TableComponentMode.DISPLAY_MODE) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "X",
        "Y",
        "Umlsc_States",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "X",
        "Y",
        "Umlsc_States",
      ]
      this.selection = new SelectionModel<UmlStateDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getUmlStates()
    this.matTableDataSource = new MatTableDataSource(this.umlstates)
  }

  getUmlStates(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.umlstates = this.frontRepo.UmlStates_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {
          this.umlstates.forEach(
            umlstate => {
              let ID = this.dialogData.ID
              let revPointer = umlstate[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(umlstate)
              }
            }
          )
          this.selection = new SelectionModel<UmlStateDB>(allowMultiSelect, this.initialSelection);
        }

        if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

          let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s"]
          let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)

          if (sourceInstance[this.dialogData.SourceField]) {
            for (let associationInstance of sourceInstance[this.dialogData.SourceField]) {
              let umlstate = associationInstance[this.dialogData.IntermediateStructField]
              this.initialSelection.push(umlstate)
            }
          }
          this.selection = new SelectionModel<UmlStateDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.umlstates
      }
    )
  }

  // newUmlState initiate a new umlstate
  // create a new UmlState objet
  newUmlState() {
  }

  deleteUmlState(umlstateID: number, umlstate: UmlStateDB) {
    // list of umlstates is truncated of umlstate before the delete
    this.umlstates = this.umlstates.filter(h => h !== umlstate);

    this.umlstateService.deleteUmlState(umlstateID).subscribe(
      umlstate => {
        this.umlstateService.UmlStateServiceChanged.next("delete")
      }
    );
  }

  editUmlState(umlstateID: number, umlstate: UmlStateDB) {

  }

  // display umlstate in router
  displayUmlStateInRouter(umlstateID: number) {
    this.router.navigate(["github_com_fullstack_lang_gongdoc_go-" + "umlstate-display", umlstateID])
  }

  // set editor outlet
  setEditorRouterOutlet(umlstateID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongdoc_go_editor: ["github_com_fullstack_lang_gongdoc_go-" + "umlstate-detail", umlstateID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(umlstateID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongdoc_go_presentation: ["github_com_fullstack_lang_gongdoc_go-" + "umlstate-presentation", umlstateID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.umlstates.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.umlstates.forEach(row => this.selection.select(row));
  }

  save() {

    if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {

      let toUpdate = new Set<UmlStateDB>()

      // reset all initial selection of umlstate that belong to umlstate
      this.initialSelection.forEach(
        umlstate => {
          umlstate[this.dialogData.ReversePointer].Int64 = 0
          umlstate[this.dialogData.ReversePointer].Valid = true
          toUpdate.add(umlstate)
        }
      )

      // from selection, set umlstate that belong to umlstate
      this.selection.selected.forEach(
        umlstate => {
          let ID = +this.dialogData.ID
          umlstate[this.dialogData.ReversePointer].Int64 = ID
          umlstate[this.dialogData.ReversePointer].Valid = true
          toUpdate.add(umlstate)
        }
      )

      // update all umlstate (only update selection & initial selection)
      toUpdate.forEach(
        umlstate => {
          this.umlstateService.updateUmlState(umlstate)
            .subscribe(umlstate => {
              this.umlstateService.UmlStateServiceChanged.next("update")
            });
        }
      )
    }

    if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

      let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s"]
      let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)

      // First, parse all instance of the association struct and remove the instance
      // that have unselect
      let unselectedUmlState = new Set<number>()
      for (let umlstate of this.initialSelection) {
        if (this.selection.selected.includes(umlstate)) {
          // console.log("umlstate " + umlstate.Name + " is still selected")
        } else {
          console.log("umlstate " + umlstate.Name + " has been unselected")
          unselectedUmlState.add(umlstate.ID)
          console.log("is unselected " + unselectedUmlState.has(umlstate.ID))
        }
      }

      // delete the association instance
      if (sourceInstance[this.dialogData.SourceField]) {
        for (let associationInstance of sourceInstance[this.dialogData.SourceField]) {
          let umlstate = associationInstance[this.dialogData.IntermediateStructField]
          if (unselectedUmlState.has(umlstate.ID)) {

            this.frontRepoService.deleteService( this.dialogData.IntermediateStruct, associationInstance )
          }
        }
      }

      // is the source array is emptyn create it
      if (sourceInstance[this.dialogData.SourceField] == undefined) {
        sourceInstance[this.dialogData.SourceField] = new Array<any>()
      }

      // second, parse all instance of the selected
      if (sourceInstance[this.dialogData.SourceField]) {
        this.selection.selected.forEach(
          umlstate => {
            if (!this.initialSelection.includes(umlstate)) {
              // console.log("umlstate " + umlstate.Name + " has been added to the selection")

              let associationInstance = {
                Name: sourceInstance["Name"] + "-" + umlstate.Name,
              }

              associationInstance[this.dialogData.IntermediateStructField+"ID"] = new NullInt64
              associationInstance[this.dialogData.IntermediateStructField+"ID"].Int64 = umlstate.ID
              associationInstance[this.dialogData.IntermediateStructField+"ID"].Valid = true

              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"] = new NullInt64
              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"].Int64 = sourceInstance["ID"]
              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"].Valid = true

              this.frontRepoService.postService( this.dialogData.IntermediateStruct, associationInstance )

            } else {
              // console.log("umlstate " + umlstate.Name + " is still selected")
            }
          }
        )
      }

      // this.selection = new SelectionModel<UmlStateDB>(allowMultiSelect, this.initialSelection);
    }

    // why pizza ?
    this.dialogRef.close('Pizza!');
  }
}
