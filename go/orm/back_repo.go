// generated by genORMTranslation.go
package orm

import (
	"os"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// BackRepoStruct supports callback functions
type BackRepoStruct struct {
	// insertion point for per struct back repo declarations
	BackRepoClassdiagram BackRepoClassdiagramStruct

	BackRepoClassshape BackRepoClassshapeStruct

	BackRepoField BackRepoFieldStruct

	BackRepoGongdocCommand BackRepoGongdocCommandStruct

	BackRepoGongdocStatus BackRepoGongdocStatusStruct

	BackRepoLink BackRepoLinkStruct

	BackRepoPkgelt BackRepoPkgeltStruct

	BackRepoPosition BackRepoPositionStruct

	BackRepoState BackRepoStateStruct

	BackRepoUmlsc BackRepoUmlscStruct

	BackRepoVertice BackRepoVerticeStruct

	CommitNb uint // this ng is updated at the BackRepo level but also at the BackRepo<GongStruct> level
}

func (backRepo *BackRepoStruct) GetLastCommitNb() uint {
	return backRepo.CommitNb
}

func (backRepo *BackRepoStruct) IncrementCommitNb() uint {
	if models.Stage.OnInitCommitCallback != nil {
		models.Stage.OnInitCommitCallback.BeforeCommit(&models.Stage)
	}
	backRepo.CommitNb = backRepo.CommitNb + 1
	return backRepo.CommitNb
}

// Init the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) Init(db *gorm.DB) {
	// insertion point for per struct back repo declarations
	backRepo.BackRepoClassdiagram.Init(db)
	backRepo.BackRepoClassshape.Init(db)
	backRepo.BackRepoField.Init(db)
	backRepo.BackRepoGongdocCommand.Init(db)
	backRepo.BackRepoGongdocStatus.Init(db)
	backRepo.BackRepoLink.Init(db)
	backRepo.BackRepoPkgelt.Init(db)
	backRepo.BackRepoPosition.Init(db)
	backRepo.BackRepoState.Init(db)
	backRepo.BackRepoUmlsc.Init(db)
	backRepo.BackRepoVertice.Init(db)

	models.Stage.BackRepo = backRepo
}

// Commit the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) Commit(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoClassdiagram.CommitPhaseOne(stage)
	backRepo.BackRepoClassshape.CommitPhaseOne(stage)
	backRepo.BackRepoField.CommitPhaseOne(stage)
	backRepo.BackRepoGongdocCommand.CommitPhaseOne(stage)
	backRepo.BackRepoGongdocStatus.CommitPhaseOne(stage)
	backRepo.BackRepoLink.CommitPhaseOne(stage)
	backRepo.BackRepoPkgelt.CommitPhaseOne(stage)
	backRepo.BackRepoPosition.CommitPhaseOne(stage)
	backRepo.BackRepoState.CommitPhaseOne(stage)
	backRepo.BackRepoUmlsc.CommitPhaseOne(stage)
	backRepo.BackRepoVertice.CommitPhaseOne(stage)

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoClassdiagram.CommitPhaseTwo(backRepo)
	backRepo.BackRepoClassshape.CommitPhaseTwo(backRepo)
	backRepo.BackRepoField.CommitPhaseTwo(backRepo)
	backRepo.BackRepoGongdocCommand.CommitPhaseTwo(backRepo)
	backRepo.BackRepoGongdocStatus.CommitPhaseTwo(backRepo)
	backRepo.BackRepoLink.CommitPhaseTwo(backRepo)
	backRepo.BackRepoPkgelt.CommitPhaseTwo(backRepo)
	backRepo.BackRepoPosition.CommitPhaseTwo(backRepo)
	backRepo.BackRepoState.CommitPhaseTwo(backRepo)
	backRepo.BackRepoUmlsc.CommitPhaseTwo(backRepo)
	backRepo.BackRepoVertice.CommitPhaseTwo(backRepo)

	backRepo.IncrementCommitNb()
}

// Checkout the database into the stage
func (backRepo *BackRepoStruct) Checkout(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoClassdiagram.CheckoutPhaseOne()
	backRepo.BackRepoClassshape.CheckoutPhaseOne()
	backRepo.BackRepoField.CheckoutPhaseOne()
	backRepo.BackRepoGongdocCommand.CheckoutPhaseOne()
	backRepo.BackRepoGongdocStatus.CheckoutPhaseOne()
	backRepo.BackRepoLink.CheckoutPhaseOne()
	backRepo.BackRepoPkgelt.CheckoutPhaseOne()
	backRepo.BackRepoPosition.CheckoutPhaseOne()
	backRepo.BackRepoState.CheckoutPhaseOne()
	backRepo.BackRepoUmlsc.CheckoutPhaseOne()
	backRepo.BackRepoVertice.CheckoutPhaseOne()

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoClassdiagram.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoClassshape.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoField.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoGongdocCommand.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoGongdocStatus.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoLink.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoPkgelt.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoPosition.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoState.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoUmlsc.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoVertice.CheckoutPhaseTwo(backRepo)
}

var BackRepo BackRepoStruct

func GetLastCommitNb() uint {
	return BackRepo.GetLastCommitNb()
}

// Backup the BackRepoStruct
func (backRepo *BackRepoStruct) Backup(stage *models.StageStruct, dirPath string) {
	os.Mkdir(dirPath, os.ModePerm)

	// insertion point for per struct backup
	backRepo.BackRepoClassdiagram.Backup(dirPath)
	backRepo.BackRepoClassshape.Backup(dirPath)
	backRepo.BackRepoField.Backup(dirPath)
	backRepo.BackRepoGongdocCommand.Backup(dirPath)
	backRepo.BackRepoGongdocStatus.Backup(dirPath)
	backRepo.BackRepoLink.Backup(dirPath)
	backRepo.BackRepoPkgelt.Backup(dirPath)
	backRepo.BackRepoPosition.Backup(dirPath)
	backRepo.BackRepoState.Backup(dirPath)
	backRepo.BackRepoUmlsc.Backup(dirPath)
	backRepo.BackRepoVertice.Backup(dirPath)
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) Restore(stage *models.StageStruct, dirPath string) {
	models.Stage.Commit()
	models.Stage.Reset()
	models.Stage.Checkout()

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoClassdiagram.RestorePhaseOne(dirPath)
	backRepo.BackRepoClassshape.RestorePhaseOne(dirPath)
	backRepo.BackRepoField.RestorePhaseOne(dirPath)
	backRepo.BackRepoGongdocCommand.RestorePhaseOne(dirPath)
	backRepo.BackRepoGongdocStatus.RestorePhaseOne(dirPath)
	backRepo.BackRepoLink.RestorePhaseOne(dirPath)
	backRepo.BackRepoPkgelt.RestorePhaseOne(dirPath)
	backRepo.BackRepoPosition.RestorePhaseOne(dirPath)
	backRepo.BackRepoState.RestorePhaseOne(dirPath)
	backRepo.BackRepoUmlsc.RestorePhaseOne(dirPath)
	backRepo.BackRepoVertice.RestorePhaseOne(dirPath)

	//
	// restauration second phase (reindex pointers with the new ID)
	//
	
	// insertion point for per struct backup
	backRepo.BackRepoClassdiagram.RestorePhaseTwo()
	backRepo.BackRepoClassshape.RestorePhaseTwo()
	backRepo.BackRepoField.RestorePhaseTwo()
	backRepo.BackRepoGongdocCommand.RestorePhaseTwo()
	backRepo.BackRepoGongdocStatus.RestorePhaseTwo()
	backRepo.BackRepoLink.RestorePhaseTwo()
	backRepo.BackRepoPkgelt.RestorePhaseTwo()
	backRepo.BackRepoPosition.RestorePhaseTwo()
	backRepo.BackRepoState.RestorePhaseTwo()
	backRepo.BackRepoUmlsc.RestorePhaseTwo()
	backRepo.BackRepoVertice.RestorePhaseTwo()

	models.Stage.Checkout()
}

