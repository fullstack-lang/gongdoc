// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_State sql.NullBool
var __State_time__dummyDeclaration time.Duration
var dummy_State_sort sort.Float64Slice

// StateAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model stateAPI
type StateAPI struct {
	gorm.Model

	models.State

	// encoding of pointers
	StatePointersEnconding
}

// StatePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type StatePointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// Implementation of a reverse ID for field Umlsc{}.States []*State
	Umlsc_StatesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Umlsc_StatesDBID_Index sql.NullInt64
}

// StateDB describes a state in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model stateDB
type StateDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field stateDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field stateDB.X {{BasicKind}} (to be completed)
	X_Data sql.NullFloat64

	// Declation for basic field stateDB.Y {{BasicKind}} (to be completed)
	Y_Data sql.NullFloat64

	// encoding of pointers
	StatePointersEnconding
}

// StateDBs arrays stateDBs
// swagger:response stateDBsResponse
type StateDBs []StateDB

// StateDBResponse provides response
// swagger:response stateDBResponse
type StateDBResponse struct {
	StateDB
}

type BackRepoStateStruct struct {
	// stores StateDB according to their gorm ID
	Map_StateDBID_StateDB *map[uint]*StateDB

	// stores StateDB ID according to State address
	Map_StatePtr_StateDBID *map[*models.State]uint

	// stores State according to their gorm ID
	Map_StateDBID_StatePtr *map[uint]*models.State

	db *gorm.DB
}

func (backRepoState *BackRepoStateStruct) GetDB() *gorm.DB {
	return backRepoState.db
}

// GetStateDBFromStatePtr is a handy function to access the back repo instance from the stage instance
func (backRepoState *BackRepoStateStruct) GetStateDBFromStatePtr(state *models.State) (stateDB *StateDB) {
	id := (*backRepoState.Map_StatePtr_StateDBID)[state]
	stateDB = (*backRepoState.Map_StateDBID_StateDB)[id]
	return
}

// BackRepoState.Init set up the BackRepo of the State
func (backRepoState *BackRepoStateStruct) Init(db *gorm.DB) (Error error) {

	if backRepoState.Map_StateDBID_StatePtr != nil {
		err := errors.New("In Init, backRepoState.Map_StateDBID_StatePtr should be nil")
		return err
	}

	if backRepoState.Map_StateDBID_StateDB != nil {
		err := errors.New("In Init, backRepoState.Map_StateDBID_StateDB should be nil")
		return err
	}

	if backRepoState.Map_StatePtr_StateDBID != nil {
		err := errors.New("In Init, backRepoState.Map_StatePtr_StateDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.State, 0)
	backRepoState.Map_StateDBID_StatePtr = &tmp

	tmpDB := make(map[uint]*StateDB, 0)
	backRepoState.Map_StateDBID_StateDB = &tmpDB

	tmpID := make(map[*models.State]uint, 0)
	backRepoState.Map_StatePtr_StateDBID = &tmpID

	backRepoState.db = db
	return
}

// BackRepoState.CommitPhaseOne commits all staged instances of State to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoState *BackRepoStateStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for state := range stage.States {
		backRepoState.CommitPhaseOneInstance(state)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, state := range *backRepoState.Map_StateDBID_StatePtr {
		if _, ok := stage.States[state]; !ok {
			backRepoState.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoState.CommitDeleteInstance commits deletion of State to the BackRepo
func (backRepoState *BackRepoStateStruct) CommitDeleteInstance(id uint) (Error error) {

	state := (*backRepoState.Map_StateDBID_StatePtr)[id]

	// state is not staged anymore, remove stateDB
	stateDB := (*backRepoState.Map_StateDBID_StateDB)[id]
	query := backRepoState.db.Unscoped().Delete(&stateDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoState.Map_StatePtr_StateDBID), state)
	delete((*backRepoState.Map_StateDBID_StatePtr), id)
	delete((*backRepoState.Map_StateDBID_StateDB), id)

	return
}

// BackRepoState.CommitPhaseOneInstance commits state staged instances of State to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoState *BackRepoStateStruct) CommitPhaseOneInstance(state *models.State) (Error error) {

	// check if the state is not commited yet
	if _, ok := (*backRepoState.Map_StatePtr_StateDBID)[state]; ok {
		return
	}

	// initiate state
	var stateDB StateDB
	stateDB.CopyBasicFieldsFromState(state)

	query := backRepoState.db.Create(&stateDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoState.Map_StatePtr_StateDBID)[state] = stateDB.ID
	(*backRepoState.Map_StateDBID_StatePtr)[stateDB.ID] = state
	(*backRepoState.Map_StateDBID_StateDB)[stateDB.ID] = &stateDB

	return
}

// BackRepoState.CommitPhaseTwo commits all staged instances of State to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoState *BackRepoStateStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, state := range *backRepoState.Map_StateDBID_StatePtr {
		backRepoState.CommitPhaseTwoInstance(backRepo, idx, state)
	}

	return
}

// BackRepoState.CommitPhaseTwoInstance commits {{structname }} of models.State to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoState *BackRepoStateStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, state *models.State) (Error error) {

	// fetch matching stateDB
	if stateDB, ok := (*backRepoState.Map_StateDBID_StateDB)[idx]; ok {

		stateDB.CopyBasicFieldsFromState(state)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoState.db.Save(&stateDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown State intance %s", state.Name))
		return err
	}

	return
}

// BackRepoState.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoState *BackRepoStateStruct) CheckoutPhaseOne() (Error error) {

	stateDBArray := make([]StateDB, 0)
	query := backRepoState.db.Find(&stateDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, stateDB := range stateDBArray {
		backRepoState.CheckoutPhaseOneInstance(&stateDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a stateDB that has been found in the DB, updates the backRepo and stages the
// models version of the stateDB
func (backRepoState *BackRepoStateStruct) CheckoutPhaseOneInstance(stateDB *StateDB) (Error error) {

	state, ok := (*backRepoState.Map_StateDBID_StatePtr)[stateDB.ID]
	if !ok {
		state = new(models.State)

		(*backRepoState.Map_StateDBID_StatePtr)[stateDB.ID] = state
		(*backRepoState.Map_StatePtr_StateDBID)[state] = stateDB.ID

		// append model store with the new element
		state.Stage()
	}
	stateDB.CopyBasicFieldsToState(state)

	// preserve pointer to stateDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_StateDBID_StateDB)[stateDB hold variable pointers
	stateDB_Data := *stateDB
	preservedPtrToState := &stateDB_Data
	(*backRepoState.Map_StateDBID_StateDB)[stateDB.ID] = preservedPtrToState

	return
}

// BackRepoState.CheckoutPhaseTwo Checkouts all staged instances of State to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoState *BackRepoStateStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, stateDB := range *backRepoState.Map_StateDBID_StateDB {
		backRepoState.CheckoutPhaseTwoInstance(backRepo, stateDB)
	}
	return
}

// BackRepoState.CheckoutPhaseTwoInstance Checkouts staged instances of State to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoState *BackRepoStateStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, stateDB *StateDB) (Error error) {

	state := (*backRepoState.Map_StateDBID_StatePtr)[stateDB.ID]
	_ = state // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitState allows commit of a single state (if already staged)
func (backRepo *BackRepoStruct) CommitState(state *models.State) {
	backRepo.BackRepoState.CommitPhaseOneInstance(state)
	if id, ok := (*backRepo.BackRepoState.Map_StatePtr_StateDBID)[state]; ok {
		backRepo.BackRepoState.CommitPhaseTwoInstance(backRepo, id, state)
	}
}

// CommitState allows checkout of a single state (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutState(state *models.State) {
	// check if the state is staged
	if _, ok := (*backRepo.BackRepoState.Map_StatePtr_StateDBID)[state]; ok {

		if id, ok := (*backRepo.BackRepoState.Map_StatePtr_StateDBID)[state]; ok {
			var stateDB StateDB
			stateDB.ID = id

			if err := backRepo.BackRepoState.db.First(&stateDB, id).Error; err != nil {
				log.Panicln("CheckoutState : Problem with getting object with id:", id)
			}
			backRepo.BackRepoState.CheckoutPhaseOneInstance(&stateDB)
			backRepo.BackRepoState.CheckoutPhaseTwoInstance(backRepo, &stateDB)
		}
	}
}

// CopyBasicFieldsToStateDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (stateDB *StateDB) CopyBasicFieldsFromState(state *models.State) {
	// insertion point for fields commit
	stateDB.Name_Data.String = state.Name
	stateDB.Name_Data.Valid = true

	stateDB.X_Data.Float64 = state.X
	stateDB.X_Data.Valid = true

	stateDB.Y_Data.Float64 = state.Y
	stateDB.Y_Data.Valid = true

}

// CopyBasicFieldsToStateDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (stateDB *StateDB) CopyBasicFieldsToState(state *models.State) {

	// insertion point for checkout of basic fields (back repo to stage)
	state.Name = stateDB.Name_Data.String
	state.X = stateDB.X_Data.Float64
	state.Y = stateDB.Y_Data.Float64
}

// Backup generates a json file from a slice of all StateDB instances in the backrepo
func (backRepoState *BackRepoStateStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "StateDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StateDB, 0)
	for _, stateDB := range *backRepoState.Map_StateDBID_StateDB {
		forBackup = append(forBackup, stateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json State ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json State file", err.Error())
	}
}

// RestorePhaseOne read the file "StateDB.json" in dirPath that stores an array
// of StateDB and stores it in the database
// the map BackRepoStateid_atBckpTime_newID is updated accordingly
func (backRepoState *BackRepoStateStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStateid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "StateDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json State file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*StateDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_StateDBID_StateDB
	for _, stateDB := range forRestore {

		stateDB_ID_atBackupTime := stateDB.ID
		stateDB.ID = 0
		query := backRepoState.db.Create(stateDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoState.Map_StateDBID_StateDB)[stateDB.ID] = stateDB
		BackRepoStateid_atBckpTime_newID[stateDB_ID_atBackupTime] = stateDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json State file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<State>id_atBckpTime_newID
// to compute new index
func (backRepoState *BackRepoStateStruct) RestorePhaseTwo() {

	for _, stateDB := range (*backRepoState.Map_StateDBID_StateDB) {

		// next line of code is to avert unused variable compilation error
		_ = stateDB

		// insertion point for reindexing pointers encoding
		// This reindex state.States
		if stateDB.Umlsc_StatesDBID.Int64 != 0 {
			stateDB.Umlsc_StatesDBID.Int64 = 
				int64(BackRepoUmlscid_atBckpTime_newID[uint(stateDB.Umlsc_StatesDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoState.db.Model(stateDB).Updates(*stateDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStateid_atBckpTime_newID map[uint]uint
