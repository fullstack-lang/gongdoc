// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdoc/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ReferenceIdentifier_sql sql.NullBool
var dummy_ReferenceIdentifier_time time.Duration
var dummy_ReferenceIdentifier_sort sort.Float64Slice

// ReferenceIdentifierAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model referenceidentifierAPI
type ReferenceIdentifierAPI struct {
	gorm.Model

	models.ReferenceIdentifier

	// encoding of pointers
	ReferenceIdentifierPointersEnconding
}

// ReferenceIdentifierPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ReferenceIdentifierPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// ReferenceIdentifierDB describes a referenceidentifier in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model referenceidentifierDB
type ReferenceIdentifierDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field referenceidentifierDB.Name
	Name_Data sql.NullString

	// Declation for basic field referenceidentifierDB.NbInstances
	NbInstances_Data sql.NullInt64
	// encoding of pointers
	ReferenceIdentifierPointersEnconding
}

// ReferenceIdentifierDBs arrays referenceidentifierDBs
// swagger:response referenceidentifierDBsResponse
type ReferenceIdentifierDBs []ReferenceIdentifierDB

// ReferenceIdentifierDBResponse provides response
// swagger:response referenceidentifierDBResponse
type ReferenceIdentifierDBResponse struct {
	ReferenceIdentifierDB
}

// ReferenceIdentifierWOP is a ReferenceIdentifier without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ReferenceIdentifierWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NbInstances int `xlsx:"2"`
	// insertion for WOP pointer fields
}

var ReferenceIdentifier_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NbInstances",
}

type BackRepoReferenceIdentifierStruct struct {
	// stores ReferenceIdentifierDB according to their gorm ID
	Map_ReferenceIdentifierDBID_ReferenceIdentifierDB *map[uint]*ReferenceIdentifierDB

	// stores ReferenceIdentifierDB ID according to ReferenceIdentifier address
	Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID *map[*models.ReferenceIdentifier]uint

	// stores ReferenceIdentifier according to their gorm ID
	Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr *map[uint]*models.ReferenceIdentifier

	db *gorm.DB
}

func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) GetDB() *gorm.DB {
	return backRepoReferenceIdentifier.db
}

// GetReferenceIdentifierDBFromReferenceIdentifierPtr is a handy function to access the back repo instance from the stage instance
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) GetReferenceIdentifierDBFromReferenceIdentifierPtr(referenceidentifier *models.ReferenceIdentifier) (referenceidentifierDB *ReferenceIdentifierDB) {
	id := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID)[referenceidentifier]
	referenceidentifierDB = (*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB)[id]
	return
}

// BackRepoReferenceIdentifier.Init set up the BackRepo of the ReferenceIdentifier
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) Init(db *gorm.DB) (Error error) {

	if backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr != nil {
		err := errors.New("In Init, backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr should be nil")
		return err
	}

	if backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB != nil {
		err := errors.New("In Init, backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB should be nil")
		return err
	}

	if backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID != nil {
		err := errors.New("In Init, backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.ReferenceIdentifier, 0)
	backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr = &tmp

	tmpDB := make(map[uint]*ReferenceIdentifierDB, 0)
	backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB = &tmpDB

	tmpID := make(map[*models.ReferenceIdentifier]uint, 0)
	backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID = &tmpID

	backRepoReferenceIdentifier.db = db
	return
}

// BackRepoReferenceIdentifier.CommitPhaseOne commits all staged instances of ReferenceIdentifier to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for referenceidentifier := range stage.ReferenceIdentifiers {
		backRepoReferenceIdentifier.CommitPhaseOneInstance(referenceidentifier)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, referenceidentifier := range *backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr {
		if _, ok := stage.ReferenceIdentifiers[referenceidentifier]; !ok {
			backRepoReferenceIdentifier.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoReferenceIdentifier.CommitDeleteInstance commits deletion of ReferenceIdentifier to the BackRepo
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CommitDeleteInstance(id uint) (Error error) {

	referenceidentifier := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr)[id]

	// referenceidentifier is not staged anymore, remove referenceidentifierDB
	referenceidentifierDB := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB)[id]
	query := backRepoReferenceIdentifier.db.Unscoped().Delete(&referenceidentifierDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID), referenceidentifier)
	delete((*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr), id)
	delete((*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB), id)

	return
}

// BackRepoReferenceIdentifier.CommitPhaseOneInstance commits referenceidentifier staged instances of ReferenceIdentifier to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CommitPhaseOneInstance(referenceidentifier *models.ReferenceIdentifier) (Error error) {

	// check if the referenceidentifier is not commited yet
	if _, ok := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID)[referenceidentifier]; ok {
		return
	}

	// initiate referenceidentifier
	var referenceidentifierDB ReferenceIdentifierDB
	referenceidentifierDB.CopyBasicFieldsFromReferenceIdentifier(referenceidentifier)

	query := backRepoReferenceIdentifier.db.Create(&referenceidentifierDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID)[referenceidentifier] = referenceidentifierDB.ID
	(*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr)[referenceidentifierDB.ID] = referenceidentifier
	(*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB)[referenceidentifierDB.ID] = &referenceidentifierDB

	return
}

// BackRepoReferenceIdentifier.CommitPhaseTwo commits all staged instances of ReferenceIdentifier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, referenceidentifier := range *backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr {
		backRepoReferenceIdentifier.CommitPhaseTwoInstance(backRepo, idx, referenceidentifier)
	}

	return
}

// BackRepoReferenceIdentifier.CommitPhaseTwoInstance commits {{structname }} of models.ReferenceIdentifier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, referenceidentifier *models.ReferenceIdentifier) (Error error) {

	// fetch matching referenceidentifierDB
	if referenceidentifierDB, ok := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB)[idx]; ok {

		referenceidentifierDB.CopyBasicFieldsFromReferenceIdentifier(referenceidentifier)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoReferenceIdentifier.db.Save(&referenceidentifierDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ReferenceIdentifier intance %s", referenceidentifier.Name))
		return err
	}

	return
}

// BackRepoReferenceIdentifier.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CheckoutPhaseOne() (Error error) {

	referenceidentifierDBArray := make([]ReferenceIdentifierDB, 0)
	query := backRepoReferenceIdentifier.db.Find(&referenceidentifierDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	referenceidentifierInstancesToBeRemovedFromTheStage := make(map[*models.ReferenceIdentifier]any)
	for key, value := range models.Stage.ReferenceIdentifiers {
		referenceidentifierInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, referenceidentifierDB := range referenceidentifierDBArray {
		backRepoReferenceIdentifier.CheckoutPhaseOneInstance(&referenceidentifierDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		referenceidentifier, ok := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr)[referenceidentifierDB.ID]
		if ok {
			delete(referenceidentifierInstancesToBeRemovedFromTheStage, referenceidentifier)
		}
	}

	// remove from stage and back repo's 3 maps all referenceidentifiers that are not in the checkout
	for referenceidentifier := range referenceidentifierInstancesToBeRemovedFromTheStage {
		referenceidentifier.Unstage()

		// remove instance from the back repo 3 maps
		referenceidentifierID := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID)[referenceidentifier]
		delete((*backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID), referenceidentifier)
		delete((*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB), referenceidentifierID)
		delete((*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr), referenceidentifierID)
	}

	return
}

// CheckoutPhaseOneInstance takes a referenceidentifierDB that has been found in the DB, updates the backRepo and stages the
// models version of the referenceidentifierDB
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CheckoutPhaseOneInstance(referenceidentifierDB *ReferenceIdentifierDB) (Error error) {

	referenceidentifier, ok := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr)[referenceidentifierDB.ID]
	if !ok {
		referenceidentifier = new(models.ReferenceIdentifier)

		(*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr)[referenceidentifierDB.ID] = referenceidentifier
		(*backRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID)[referenceidentifier] = referenceidentifierDB.ID

		// append model store with the new element
		referenceidentifier.Name = referenceidentifierDB.Name_Data.String
		referenceidentifier.Stage()
	}
	referenceidentifierDB.CopyBasicFieldsToReferenceIdentifier(referenceidentifier)

	// preserve pointer to referenceidentifierDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ReferenceIdentifierDBID_ReferenceIdentifierDB)[referenceidentifierDB hold variable pointers
	referenceidentifierDB_Data := *referenceidentifierDB
	preservedPtrToReferenceIdentifier := &referenceidentifierDB_Data
	(*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB)[referenceidentifierDB.ID] = preservedPtrToReferenceIdentifier

	return
}

// BackRepoReferenceIdentifier.CheckoutPhaseTwo Checkouts all staged instances of ReferenceIdentifier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, referenceidentifierDB := range *backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB {
		backRepoReferenceIdentifier.CheckoutPhaseTwoInstance(backRepo, referenceidentifierDB)
	}
	return
}

// BackRepoReferenceIdentifier.CheckoutPhaseTwoInstance Checkouts staged instances of ReferenceIdentifier to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, referenceidentifierDB *ReferenceIdentifierDB) (Error error) {

	referenceidentifier := (*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierPtr)[referenceidentifierDB.ID]
	_ = referenceidentifier // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitReferenceIdentifier allows commit of a single referenceidentifier (if already staged)
func (backRepo *BackRepoStruct) CommitReferenceIdentifier(referenceidentifier *models.ReferenceIdentifier) {
	backRepo.BackRepoReferenceIdentifier.CommitPhaseOneInstance(referenceidentifier)
	if id, ok := (*backRepo.BackRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID)[referenceidentifier]; ok {
		backRepo.BackRepoReferenceIdentifier.CommitPhaseTwoInstance(backRepo, id, referenceidentifier)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitReferenceIdentifier allows checkout of a single referenceidentifier (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutReferenceIdentifier(referenceidentifier *models.ReferenceIdentifier) {
	// check if the referenceidentifier is staged
	if _, ok := (*backRepo.BackRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID)[referenceidentifier]; ok {

		if id, ok := (*backRepo.BackRepoReferenceIdentifier.Map_ReferenceIdentifierPtr_ReferenceIdentifierDBID)[referenceidentifier]; ok {
			var referenceidentifierDB ReferenceIdentifierDB
			referenceidentifierDB.ID = id

			if err := backRepo.BackRepoReferenceIdentifier.db.First(&referenceidentifierDB, id).Error; err != nil {
				log.Panicln("CheckoutReferenceIdentifier : Problem with getting object with id:", id)
			}
			backRepo.BackRepoReferenceIdentifier.CheckoutPhaseOneInstance(&referenceidentifierDB)
			backRepo.BackRepoReferenceIdentifier.CheckoutPhaseTwoInstance(backRepo, &referenceidentifierDB)
		}
	}
}

// CopyBasicFieldsFromReferenceIdentifier
func (referenceidentifierDB *ReferenceIdentifierDB) CopyBasicFieldsFromReferenceIdentifier(referenceidentifier *models.ReferenceIdentifier) {
	// insertion point for fields commit

	referenceidentifierDB.Name_Data.String = referenceidentifier.Name
	referenceidentifierDB.Name_Data.Valid = true

	referenceidentifierDB.NbInstances_Data.Int64 = int64(referenceidentifier.NbInstances)
	referenceidentifierDB.NbInstances_Data.Valid = true
}

// CopyBasicFieldsFromReferenceIdentifierWOP
func (referenceidentifierDB *ReferenceIdentifierDB) CopyBasicFieldsFromReferenceIdentifierWOP(referenceidentifier *ReferenceIdentifierWOP) {
	// insertion point for fields commit

	referenceidentifierDB.Name_Data.String = referenceidentifier.Name
	referenceidentifierDB.Name_Data.Valid = true

	referenceidentifierDB.NbInstances_Data.Int64 = int64(referenceidentifier.NbInstances)
	referenceidentifierDB.NbInstances_Data.Valid = true
}

// CopyBasicFieldsToReferenceIdentifier
func (referenceidentifierDB *ReferenceIdentifierDB) CopyBasicFieldsToReferenceIdentifier(referenceidentifier *models.ReferenceIdentifier) {
	// insertion point for checkout of basic fields (back repo to stage)
	referenceidentifier.Name = referenceidentifierDB.Name_Data.String
	referenceidentifier.NbInstances = int(referenceidentifierDB.NbInstances_Data.Int64)
}

// CopyBasicFieldsToReferenceIdentifierWOP
func (referenceidentifierDB *ReferenceIdentifierDB) CopyBasicFieldsToReferenceIdentifierWOP(referenceidentifier *ReferenceIdentifierWOP) {
	referenceidentifier.ID = int(referenceidentifierDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	referenceidentifier.Name = referenceidentifierDB.Name_Data.String
	referenceidentifier.NbInstances = int(referenceidentifierDB.NbInstances_Data.Int64)
}

// Backup generates a json file from a slice of all ReferenceIdentifierDB instances in the backrepo
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ReferenceIdentifierDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ReferenceIdentifierDB, 0)
	for _, referenceidentifierDB := range *backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB {
		forBackup = append(forBackup, referenceidentifierDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json ReferenceIdentifier ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json ReferenceIdentifier file", err.Error())
	}
}

// Backup generates a json file from a slice of all ReferenceIdentifierDB instances in the backrepo
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ReferenceIdentifierDB, 0)
	for _, referenceidentifierDB := range *backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB {
		forBackup = append(forBackup, referenceidentifierDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ReferenceIdentifier")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ReferenceIdentifier_Fields, -1)
	for _, referenceidentifierDB := range forBackup {

		var referenceidentifierWOP ReferenceIdentifierWOP
		referenceidentifierDB.CopyBasicFieldsToReferenceIdentifierWOP(&referenceidentifierWOP)

		row := sh.AddRow()
		row.WriteStruct(&referenceidentifierWOP, -1)
	}
}

// RestoreXL from the "ReferenceIdentifier" sheet all ReferenceIdentifierDB instances
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoReferenceIdentifierid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ReferenceIdentifier"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoReferenceIdentifier.rowVisitorReferenceIdentifier)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) rowVisitorReferenceIdentifier(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var referenceidentifierWOP ReferenceIdentifierWOP
		row.ReadStruct(&referenceidentifierWOP)

		// add the unmarshalled struct to the stage
		referenceidentifierDB := new(ReferenceIdentifierDB)
		referenceidentifierDB.CopyBasicFieldsFromReferenceIdentifierWOP(&referenceidentifierWOP)

		referenceidentifierDB_ID_atBackupTime := referenceidentifierDB.ID
		referenceidentifierDB.ID = 0
		query := backRepoReferenceIdentifier.db.Create(referenceidentifierDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB)[referenceidentifierDB.ID] = referenceidentifierDB
		BackRepoReferenceIdentifierid_atBckpTime_newID[referenceidentifierDB_ID_atBackupTime] = referenceidentifierDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ReferenceIdentifierDB.json" in dirPath that stores an array
// of ReferenceIdentifierDB and stores it in the database
// the map BackRepoReferenceIdentifierid_atBckpTime_newID is updated accordingly
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoReferenceIdentifierid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ReferenceIdentifierDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json ReferenceIdentifier file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ReferenceIdentifierDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ReferenceIdentifierDBID_ReferenceIdentifierDB
	for _, referenceidentifierDB := range forRestore {

		referenceidentifierDB_ID_atBackupTime := referenceidentifierDB.ID
		referenceidentifierDB.ID = 0
		query := backRepoReferenceIdentifier.db.Create(referenceidentifierDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB)[referenceidentifierDB.ID] = referenceidentifierDB
		BackRepoReferenceIdentifierid_atBckpTime_newID[referenceidentifierDB_ID_atBackupTime] = referenceidentifierDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json ReferenceIdentifier file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ReferenceIdentifier>id_atBckpTime_newID
// to compute new index
func (backRepoReferenceIdentifier *BackRepoReferenceIdentifierStruct) RestorePhaseTwo() {

	for _, referenceidentifierDB := range *backRepoReferenceIdentifier.Map_ReferenceIdentifierDBID_ReferenceIdentifierDB {

		// next line of code is to avert unused variable compilation error
		_ = referenceidentifierDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoReferenceIdentifier.db.Model(referenceidentifierDB).Updates(*referenceidentifierDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoReferenceIdentifierid_atBckpTime_newID map[uint]uint
