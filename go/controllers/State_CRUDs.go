// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __State__dummysDeclaration__ models.State
var __State_time__dummyDeclaration time.Duration

// An StateID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getState updateState deleteState
type StateID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// StateInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postState updateState
type StateInput struct {
	// The State to submit or modify
	// in: body
	State *orm.StateAPI
}

// GetStates
//
// swagger:route GET /states states getStates
//
// Get all states
//
// Responses:
//    default: genericError
//        200: stateDBsResponse
func GetStates(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// source slice
	var stateDBs []orm.StateDB
	query := db.Find(&stateDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	stateAPIs := make([]orm.StateAPI, 0)

	// for each state, update fields from the database nullable fields
	for idx := range stateDBs {
		stateDB := &stateDBs[idx]
		_ = stateDB
		var stateAPI orm.StateAPI

		// insertion point for updating fields
		stateAPI.ID = stateDB.ID
		stateDB.CopyBasicFieldsToState(&stateAPI.State)
		stateAPI.StatePointersEnconding = stateDB.StatePointersEnconding
		stateAPIs = append(stateAPIs, stateAPI)
	}

	c.JSON(http.StatusOK, stateAPIs)
}

// PostState
//
// swagger:route POST /states states postState
//
// Creates a state
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: stateDBResponse
func PostState(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.StateAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create state
	stateDB := orm.StateDB{}
	stateDB.StatePointersEnconding = input.StatePointersEnconding
	stateDB.CopyBasicFieldsFromState(&input.State)

	query := db.Create(&stateDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, stateDB)
}

// GetState
//
// swagger:route GET /states/{ID} states getState
//
// Gets the details for a state.
//
// Responses:
//    default: genericError
//        200: stateDBResponse
func GetState(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get stateDB in DB
	var stateDB orm.StateDB
	if err := db.First(&stateDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var stateAPI orm.StateAPI
	stateAPI.ID = stateDB.ID
	stateAPI.StatePointersEnconding = stateDB.StatePointersEnconding
	stateDB.CopyBasicFieldsToState(&stateAPI.State)

	c.JSON(http.StatusOK, stateAPI)
}

// UpdateState
//
// swagger:route PATCH /states/{ID} states updateState
//
// Update a state
//
// Responses:
//    default: genericError
//        200: stateDBResponse
func UpdateState(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var stateDB orm.StateDB

	// fetch the state
	query := db.First(&stateDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.StateAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	stateDB.CopyBasicFieldsFromState(&input.State)
	stateDB.StatePointersEnconding = input.StatePointersEnconding

	query = db.Model(&stateDB).Updates(stateDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the stateDB
	c.JSON(http.StatusOK, stateDB)
}

// DeleteState
//
// swagger:route DELETE /states/{ID} states deleteState
//
// Delete a state
//
// Responses:
//    default: genericError
func DeleteState(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var stateDB orm.StateDB
	if err := db.First(&stateDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&stateDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
