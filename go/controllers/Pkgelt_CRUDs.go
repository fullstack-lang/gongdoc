// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongdoc/go/models"
	"github.com/fullstack-lang/gongdoc/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Pkgelt__dummysDeclaration__ models.Pkgelt
var __Pkgelt_time__dummyDeclaration time.Duration

// An PkgeltID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPkgelt updatePkgelt deletePkgelt
type PkgeltID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PkgeltInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPkgelt updatePkgelt
type PkgeltInput struct {
	// The Pkgelt to submit or modify
	// in: body
	Pkgelt *orm.PkgeltAPI
}

// GetPkgelts
//
// swagger:route GET /pkgelts pkgelts getPkgelts
//
// # Get all pkgelts
//
// Responses:
// default: genericError
//
//	200: pkgeltDBResponse
func GetPkgelts(c *gin.Context) {
	db := orm.BackRepo.BackRepoPkgelt.GetDB()

	// source slice
	var pkgeltDBs []orm.PkgeltDB
	query := db.Find(&pkgeltDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	pkgeltAPIs := make([]orm.PkgeltAPI, 0)

	// for each pkgelt, update fields from the database nullable fields
	for idx := range pkgeltDBs {
		pkgeltDB := &pkgeltDBs[idx]
		_ = pkgeltDB
		var pkgeltAPI orm.PkgeltAPI

		// insertion point for updating fields
		pkgeltAPI.ID = pkgeltDB.ID
		pkgeltDB.CopyBasicFieldsToPkgelt(&pkgeltAPI.Pkgelt)
		pkgeltAPI.PkgeltPointersEnconding = pkgeltDB.PkgeltPointersEnconding
		pkgeltAPIs = append(pkgeltAPIs, pkgeltAPI)
	}

	c.JSON(http.StatusOK, pkgeltAPIs)
}

// PostPkgelt
//
// swagger:route POST /pkgelts pkgelts postPkgelt
//
// Creates a pkgelt
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostPkgelt(c *gin.Context) {
	db := orm.BackRepo.BackRepoPkgelt.GetDB()

	// Validate input
	var input orm.PkgeltAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create pkgelt
	pkgeltDB := orm.PkgeltDB{}
	pkgeltDB.PkgeltPointersEnconding = input.PkgeltPointersEnconding
	pkgeltDB.CopyBasicFieldsFromPkgelt(&input.Pkgelt)

	query := db.Create(&pkgeltDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoPkgelt.CheckoutPhaseOneInstance(&pkgeltDB)
	pkgelt := (*orm.BackRepo.BackRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]

	if pkgelt != nil {
		models.AfterCreateFromFront(&models.Stage, pkgelt)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, pkgeltDB)
}

// GetPkgelt
//
// swagger:route GET /pkgelts/{ID} pkgelts getPkgelt
//
// Gets the details for a pkgelt.
//
// Responses:
// default: genericError
//
//	200: pkgeltDBResponse
func GetPkgelt(c *gin.Context) {
	db := orm.BackRepo.BackRepoPkgelt.GetDB()

	// Get pkgeltDB in DB
	var pkgeltDB orm.PkgeltDB
	if err := db.First(&pkgeltDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var pkgeltAPI orm.PkgeltAPI
	pkgeltAPI.ID = pkgeltDB.ID
	pkgeltAPI.PkgeltPointersEnconding = pkgeltDB.PkgeltPointersEnconding
	pkgeltDB.CopyBasicFieldsToPkgelt(&pkgeltAPI.Pkgelt)

	c.JSON(http.StatusOK, pkgeltAPI)
}

// UpdatePkgelt
//
// swagger:route PATCH /pkgelts/{ID} pkgelts updatePkgelt
//
// # Update a pkgelt
//
// Responses:
// default: genericError
//
//	200: pkgeltDBResponse
func UpdatePkgelt(c *gin.Context) {
	db := orm.BackRepo.BackRepoPkgelt.GetDB()

	// Get model if exist
	var pkgeltDB orm.PkgeltDB

	// fetch the pkgelt
	query := db.First(&pkgeltDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.PkgeltAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	pkgeltDB.CopyBasicFieldsFromPkgelt(&input.Pkgelt)
	pkgeltDB.PkgeltPointersEnconding = input.PkgeltPointersEnconding

	query = db.Model(&pkgeltDB).Updates(pkgeltDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	pkgeltNew := new(models.Pkgelt)
	pkgeltDB.CopyBasicFieldsToPkgelt(pkgeltNew)

	// get stage instance from DB instance, and call callback function
	pkgeltOld := (*orm.BackRepo.BackRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]
	if pkgeltOld != nil {
		models.AfterUpdateFromFront(&models.Stage, pkgeltOld, pkgeltNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the pkgeltDB
	c.JSON(http.StatusOK, pkgeltDB)
}

// DeletePkgelt
//
// swagger:route DELETE /pkgelts/{ID} pkgelts deletePkgelt
//
// # Delete a pkgelt
//
// default: genericError
//
//	200: pkgeltDBResponse
func DeletePkgelt(c *gin.Context) {
	db := orm.BackRepo.BackRepoPkgelt.GetDB()

	// Get model if exist
	var pkgeltDB orm.PkgeltDB
	if err := db.First(&pkgeltDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&pkgeltDB)

	// get an instance (not staged) from DB instance, and call callback function
	pkgeltDeleted := new(models.Pkgelt)
	pkgeltDB.CopyBasicFieldsToPkgelt(pkgeltDeleted)

	// get stage instance from DB instance, and call callback function
	pkgeltStaged := (*orm.BackRepo.BackRepoPkgelt.Map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]
	if pkgeltStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, pkgeltStaged, pkgeltDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
